<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app_guj/lib/demo.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app_guj/lib/demo.dart" />
              <option name="updatedContent" value="// demo.dart&#10;// This is a demo file for the Flutter project.&#10;&#10;void main() {&#10;  print('Demo file created successfully.');&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app_guj/lib/main.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app_guj/lib/main.dart" />
              <option name="originalContent" value="import 'package:flutter/material.dart';&#10;  const MyApp({super.key});&#10;void main() {&#10;        // Notice that the counter didn't reset back to zero; the application&#10;        // state is not lost during the reload. To reset the state, use hot&#10;        // restart instead.&#10;        //&#10;        // This works for code too, not just values: Most code changes can be&#10;        // tested with just a hot reload.&#10;  // This widget is the root of your application.&#10;        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),&#10;      ),&#10;    return MaterialApp(&#10;      title: 'Flutter Demo',&#10;      theme: ThemeData(&#10;        // This is the theme of your application.&#10;        //&#10;        // TRY THIS: Try running your application with &quot;flutter run&quot;. You'll see&#10;        // the application has a purple toolbar. Then, without quitting the app,&#10;        // try changing the seedColor in the colorScheme below to Colors.green&#10;        // and then invoke &quot;hot reload&quot; (save your changes or press the &quot;hot&#10;        // reload&quot; button in a Flutter-supported IDE, or press &quot;r&quot; if you used&#10;        // the command line to start the app).&#10;        //&#10;        // Notice that the counter didn't reset back to zero; the application&#10;        // state is not lost during the reload. To reset the state, use hot&#10;        // restart instead.&#10;        //&#10;        // This works for code too, not just values: Most code changes can be&#10;        // tested with just a hot reload.&#10;        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),&#10;      ),&#10;      home: const MyHomePage(title: 'Flutter Demo Home Page'),&#10;    );&#10;  }&#10;}&#10;&#10;class MyHomePage extends StatefulWidget {&#10;  const MyHomePage({super.key, required this.title});&#10;&#10;  // This widget is the home page of your application. It is stateful, meaning&#10;  // that it has a State object (defined below) that contains fields that affect&#10;  // how it looks.&#10;&#10;  // This class is the configuration for the state. It holds the values (in this&#10;  // case the title) provided by the parent (in this case the App widget) and&#10;  // used by the build method of the State. Fields in a Widget subclass are&#10;  // always marked &quot;final&quot;.&#10;&#10;  final String title;&#10;&#10;  @override&#10;  State&lt;MyHomePage&gt; createState() =&gt; _MyHomePageState();&#10;}&#10;&#10;class _MyHomePageState extends State&lt;MyHomePage&gt; {&#10;  int _counter = 0;&#10;&#10;  void _incrementCounter() {&#10;    setState(() {&#10;      // This call to setState tells the Flutter framework that something has&#10;      // changed in this State, which causes it to rerun the build method below&#10;      // so that the display can reflect the updated values. If we changed&#10;      // _counter without calling setState(), then the build method would not be&#10;      // called again, and so nothing would appear to happen.&#10;      _counter++;&#10;    });&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    // This method is rerun every time setState is called, for instance as done&#10;    // by the _incrementCounter method above.&#10;    //&#10;    // The Flutter framework has been optimized to make rerunning build methods&#10;    // fast, so that you can just rebuild anything that needs updating rather&#10;    // than having to individually change instances of widgets.&#10;    return Scaffold(&#10;      appBar: AppBar(&#10;        // TRY THIS: Try changing the color here to a specific color (to&#10;        // Colors.amber, perhaps?) and trigger a hot reload to see the AppBar&#10;        // change color while the other colors stay the same.&#10;        backgroundColor: Theme.of(context).colorScheme.inversePrimary,&#10;        // Here we take the value from the MyHomePage object that was created by&#10;        // the App.build method, and use it to set our appbar title.&#10;        title: Text(widget.title),&#10;      ),&#10;      body: Center(&#10;        // Center is a layout widget. It takes a single child and positions it&#10;        // in the middle of the parent.&#10;        child: Column(&#10;          // Column is also a layout widget. It takes a list of children and&#10;          // arranges them vertically. By default, it sizes itself to fit its&#10;          // children horizontally, and tries to be as tall as its parent.&#10;          //&#10;          // Column has various properties to control how it sizes itself and&#10;          // how it positions its children. Here we use mainAxisAlignment to&#10;          // center the children vertically; the main axis here is the vertical&#10;          // axis because Columns are vertical (the cross axis would be&#10;          // horizontal).&#10;          //&#10;          // TRY THIS: Invoke &quot;debug painting&quot; (choose the &quot;Toggle Debug Paint&quot;&#10;          // action in the IDE, or press &quot;p&quot; in the console), to see the&#10;          // wireframe for each widget.&#10;          mainAxisAlignment: MainAxisAlignment.center,&#10;          children: &lt;Widget&gt;[&#10;            const Text('You have pushed the button this many times:'),&#10;            Text(&#10;              '$_counter',&#10;              style: Theme.of(context).textTheme.headlineMedium,&#10;            ),&#10;          ],&#10;  // how it looks.&#10;  // This class is the configuration for the state. It holds the values (in this&#10;      floatingActionButton: FloatingActionButton(&#10;        onPressed: _incrementCounter,&#10;        tooltip: 'Increment',&#10;        child: const Icon(Icons.add),&#10;      ), // This trailing comma makes auto-formatting nicer for build methods.&#10;  // case the title) provided by the parent (in this case the App widget) and&#10;  // used by the build method of the State. Fields in a Widget subclass are&#10;  // always marked &quot;final&quot;.&#10;&#10;  final String title;&#10;&#10;  @override&#10;  State&lt;MyHomePage&gt; createState() =&gt; _MyHomePageState();&#10;}&#10;&#10;class _MyHomePageState extends State&lt;MyHomePage&gt; {&#10;  int _counter = 0;&#10;&#10;  void _incrementCounter() {&#10;    setState(() {&#10;      // This call to setState tells the Flutter framework that something has&#10;      // changed in this State, which causes it to rerun the build method below&#10;      // so that the display can reflect the updated values. If we changed&#10;      // _counter without calling setState(), then the build method would not be&#10;      // called again, and so nothing would appear to happen.&#10;      _counter++;&#10;    });&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    // This method is rerun every time setState is called, for instance as done&#10;    // by the _incrementCounter method above.&#10;    //&#10;    // The Flutter framework has been optimized to make rerunning build methods&#10;    // fast, so that you can just rebuild anything that needs updating rather&#10;    // than having to individually change instances of widgets.&#10;    return Scaffold(&#10;      appBar: AppBar(&#10;        // TRY THIS: Try changing the color here to a specific color (to&#10;        // Colors.amber, perhaps?) and trigger a hot reload to see the AppBar&#10;        // change color while the other colors stay the same.&#10;        backgroundColor: Theme.of(context).colorScheme.inversePrimary,&#10;        // Here we take the value from the MyHomePage object that was created by&#10;        // the App.build method, and use it to set our appbar title.&#10;        title: Text(widget.title),&#10;      ),&#10;      body: Center(&#10;        // Center is a layout widget. It takes a single child and positions it&#10;        // in the middle of the parent.&#10;        child: Column(&#10;          // Column is also a layout widget. It takes a list of children and&#10;          // arranges them vertically. By default, it sizes itself to fit its&#10;          // children horizontally, and tries to be as tall as its parent.&#10;          //&#10;          // Column has various properties to control how it sizes itself and&#10;          // how it positions its children. Here we use mainAxisAlignment to&#10;          // center the children vertically; the main axis here is the vertical&#10;          // axis because Columns are vertical (the cross axis would be&#10;          // horizontal).&#10;          //&#10;          // TRY THIS: Invoke &quot;debug painting&quot; (choose the &quot;Toggle Debug Paint&quot;&#10;          // action in the IDE, or press &quot;p&quot; in the console), to see the&#10;          // wireframe for each widget.&#10;          mainAxisAlignment: MainAxisAlignment.center,&#10;          children: &lt;Widget&gt;[&#10;            const Text('You have pushed the button this many times:'),&#10;            Text(&#10;              '$_counter',&#10;              style: Theme.of(context).textTheme.headlineMedium,&#10;            ),&#10;          ],&#10;        ),&#10;      ),&#10;      floatingActionButton: FloatingActionButton(&#10;        onPressed: _incrementCounter,&#10;        tooltip: 'Increment',&#10;        child: const Icon(Icons.add),&#10;      ), // This trailing comma makes auto-formatting nicer for build methods.&#10;    );&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:provider/provider.dart';&#10;import 'screens/home_screen.dart';&#10;import 'services/tts_service.dart';&#10;import 'services/voice_command_service.dart';&#10;import 'package:workmanager/workmanager.dart';&#10;import 'services/news_api_service.dart';&#10;&#10;void callbackDispatcher() {&#10;  Workmanager().executeTask((task, inputData) async {&#10;    await NewsApiService().fetchNews();&#10;    return Future.value(true);&#10;  });&#10;}&#10;&#10;void main() async {&#10;  WidgetsFlutterBinding.ensureInitialized();&#10;  await Workmanager().initialize(callbackDispatcher, isInDebugMode: false);&#10;  await Workmanager().registerPeriodicTask(&#10;    'fetchNewsTask',&#10;    'fetchNewsTask',&#10;    frequency: const Duration(hours: 24),&#10;    initialDelay: const Duration(hours: 7), // 7:00 AM&#10;  );&#10;  runApp(const MyApp());&#10;}&#10;&#10;class MyApp extends StatelessWidget {&#10;  const MyApp({super.key});&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return MultiProvider(&#10;      providers: [&#10;        ChangeNotifierProvider(create: (_) =&gt; TtsService()),&#10;        ChangeNotifierProvider(create: (_) =&gt; VoiceCommandService()),&#10;      ],&#10;      child: MaterialApp(&#10;        title: 'Gujarati Samachar',&#10;        theme: ThemeData(&#10;          useMaterial3: true,&#10;          colorScheme: ColorScheme.fromSeed(seedColor: Colors.orange),&#10;        ),&#10;        home: const HomeScreen(),&#10;      ),&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app_guj/lib/models/news_model.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app_guj/lib/models/news_model.dart" />
              <option name="updatedContent" value="// models/news_model.dart&#10;// Model for Gujarati news item.&#10;&#10;class NewsModel {&#10;  final String title;&#10;  final String description;&#10;  final String link;&#10;  final DateTime pubDate;&#10;&#10;  NewsModel({&#10;    required this.title,&#10;    required this.description,&#10;    required this.link,&#10;    required this.pubDate,&#10;  });&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app_guj/lib/screens/home_screen.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app_guj/lib/screens/home_screen.dart" />
              <option name="updatedContent" value="// screens/home_screen.dart&#10;// Home screen: List of news headlines, play and mic controls.&#10;&#10;import 'package:flutter/material.dart';&#10;import 'package:provider/provider.dart';&#10;import '../services/news_api_service.dart';&#10;import '../models/news_model.dart';&#10;import '../services/tts_service.dart';&#10;import '../services/voice_command_service.dart';&#10;import 'player_screen.dart';&#10;&#10;class HomeScreen extends StatefulWidget {&#10;  const HomeScreen({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;HomeScreen&gt; createState() =&gt; _HomeScreenState();&#10;}&#10;&#10;class _HomeScreenState extends State&lt;HomeScreen&gt; {&#10;  late Future&lt;List&lt;NewsModel&gt;&gt; _newsFuture;&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _newsFuture = NewsApiService().fetchNews();&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    final ttsService = Provider.of&lt;TtsService&gt;(context);&#10;    final voiceService = Provider.of&lt;VoiceCommandService&gt;(context);&#10;    return Scaffold(&#10;      appBar: AppBar(&#10;        title: const Text('Gujarati Samachar'),&#10;        actions: [&#10;          IconButton(&#10;            icon: Icon(voiceService.isListening ? Icons.mic : Icons.mic_none),&#10;            onPressed: () {&#10;              if (voiceService.isListening) {&#10;                voiceService.stopListening();&#10;              } else {&#10;                voiceService.startListening();&#10;              }&#10;            },&#10;          ),&#10;        ],&#10;      ),&#10;      body: FutureBuilder&lt;List&lt;NewsModel&gt;&gt;(&#10;        future: _newsFuture,&#10;        builder: (context, snapshot) {&#10;          if (snapshot.connectionState == ConnectionState.waiting) {&#10;            return const Center(child: CircularProgressIndicator());&#10;          } else if (snapshot.hasError) {&#10;            return Center(child: Text('Error: \\${snapshot.error}'));&#10;          } else if (!snapshot.hasData || snapshot.data!.isEmpty) {&#10;            return const Center(child: Text('No news available.'));&#10;          }&#10;          final newsList = snapshot.data!;&#10;          return ListView.builder(&#10;            itemCount: newsList.length,&#10;            itemBuilder: (context, index) {&#10;              final news = newsList[index];&#10;              return ListTile(&#10;                title: Text(news.title),&#10;                subtitle: Text(news.description, maxLines: 2, overflow: TextOverflow.ellipsis),&#10;                trailing: IconButton(&#10;                  icon: const Icon(Icons.play_arrow),&#10;                  onPressed: () {&#10;                    Navigator.push(&#10;                      context,&#10;                      MaterialPageRoute(&#10;                        builder: (_) =&gt; PlayerScreen(newsList: newsList, initialIndex: index),&#10;                      ),&#10;                    );&#10;                  },&#10;                ),&#10;              );&#10;            },&#10;          );&#10;        },&#10;      ),&#10;    );&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app_guj/lib/screens/player_screen.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app_guj/lib/screens/player_screen.dart" />
              <option name="updatedContent" value="// screens/player_screen.dart&#10;// Player screen: Show current news, TTS controls (Play, Stop, Next).&#10;&#10;import 'package:flutter/material.dart';&#10;import 'package:provider/provider.dart';&#10;import '../models/news_model.dart';&#10;import '../services/tts_service.dart';&#10;&#10;class PlayerScreen extends StatefulWidget {&#10;  final List&lt;NewsModel&gt; newsList;&#10;  final int initialIndex;&#10;  const PlayerScreen({Key? key, required this.newsList, required this.initialIndex}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;PlayerScreen&gt; createState() =&gt; _PlayerScreenState();&#10;}&#10;&#10;class _PlayerScreenState extends State&lt;PlayerScreen&gt; {&#10;  late int _currentIndex;&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _currentIndex = widget.initialIndex;&#10;    WidgetsBinding.instance.addPostFrameCallback((_) {&#10;      _playCurrentNews();&#10;    });&#10;  }&#10;&#10;  void _playCurrentNews() {&#10;    final ttsService = Provider.of&lt;TtsService&gt;(context, listen: false);&#10;    ttsService.speak(widget.newsList[_currentIndex].description);&#10;  }&#10;&#10;  void _stopTts() {&#10;    final ttsService = Provider.of&lt;TtsService&gt;(context, listen: false);&#10;    ttsService.stop();&#10;  }&#10;&#10;  void _nextNews() {&#10;    if (_currentIndex &lt; widget.newsList.length - 1) {&#10;      setState(() {&#10;        _currentIndex++;&#10;      });&#10;      _playCurrentNews();&#10;    }&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    final news = widget.newsList[_currentIndex];&#10;    final ttsService = Provider.of&lt;TtsService&gt;(context);&#10;    return Scaffold(&#10;      appBar: AppBar(&#10;        title: const Text('News Player'),&#10;      ),&#10;      body: Padding(&#10;        padding: const EdgeInsets.all(16.0),&#10;        child: Column(&#10;          crossAxisAlignment: CrossAxisAlignment.start,&#10;          children: [&#10;            Text(news.title, style: Theme.of(context).textTheme.headlineSmall),&#10;            const SizedBox(height: 16),&#10;            Expanded(child: SingleChildScrollView(child: Text(news.description))),&#10;            Row(&#10;              mainAxisAlignment: MainAxisAlignment.center,&#10;              children: [&#10;                IconButton(&#10;                  icon: const Icon(Icons.stop),&#10;                  onPressed: _stopTts,&#10;                ),&#10;                IconButton(&#10;                  icon: Icon(ttsService.isPlaying ? Icons.pause : Icons.play_arrow),&#10;                  onPressed: _playCurrentNews,&#10;                ),&#10;                IconButton(&#10;                  icon: const Icon(Icons.skip_next),&#10;                  onPressed: _nextNews,&#10;                ),&#10;              ],&#10;            ),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app_guj/lib/services/news_api_service.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app_guj/lib/services/news_api_service.dart" />
              <option name="updatedContent" value="// services/news_api_service.dart&#10;// Service to fetch and parse Gujarati news from RSS feed.&#10;&#10;import 'package:http/http.dart' as http;&#10;import 'package:xml/xml.dart';&#10;import '../models/news_model.dart';&#10;&#10;class NewsApiService {&#10;  static const String rssUrl = 'https://www.divyabhaskar.co.in/rss-feeder/';&#10;&#10;  Future&lt;List&lt;NewsModel&gt;&gt; fetchNews() async {&#10;    final response = await http.get(Uri.parse(rssUrl));&#10;    if (response.statusCode == 200) {&#10;      final document = XmlDocument.parse(response.body);&#10;      final items = document.findAllElements('item');&#10;      return items.map((item) {&#10;        return NewsModel(&#10;          title: item.getElement('title')?.text ?? '',&#10;          description: item.getElement('description')?.text ?? '',&#10;          link: item.getElement('link')?.text ?? '',&#10;          pubDate: DateTime.tryParse(item.getElement('pubDate')?.text ?? '') ?? DateTime.now(),&#10;        );&#10;      }).toList();&#10;    } else {&#10;      throw Exception('Failed to load news');&#10;    }&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app_guj/lib/services/tts_service.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app_guj/lib/services/tts_service.dart" />
              <option name="updatedContent" value="// services/tts_service.dart&#10;// Service for Gujarati text-to-speech functionality.&#10;&#10;import 'package:flutter_tts/flutter_tts.dart';&#10;import 'package:flutter/material.dart';&#10;&#10;class TtsService extends ChangeNotifier {&#10;  final FlutterTts _flutterTts = FlutterTts();&#10;  bool _isPlaying = false;&#10;&#10;  bool get isPlaying =&gt; _isPlaying;&#10;&#10;  TtsService() {&#10;    _flutterTts.setLanguage('gu-IN');&#10;    _flutterTts.setCompletionHandler(() {&#10;      _isPlaying = false;&#10;      notifyListeners();&#10;    });&#10;  }&#10;&#10;  Future&lt;void&gt; speak(String text) async {&#10;    _isPlaying = true;&#10;    notifyListeners();&#10;    await _flutterTts.speak(text);&#10;  }&#10;&#10;  Future&lt;void&gt; stop() async {&#10;    await _flutterTts.stop();&#10;    _isPlaying = false;&#10;    notifyListeners();&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>